function [Cunweighted, Cweighted, exp_groups] = ...
    calculateMeanCoherenceAllCouples(fnirs_data, ...
    couple_spec_file, channel_def_file, max_period, min_period)

% [Cunweighted, Cweighted, exp_groups] = ...
%     calculateMeanCoherenceAllCouples(fnirs_data, ...
%     couple_spec_file, channel_def_file, max_period, min_period)
%
% Calculates the mean coherence throughout the duration of each trial, in a
% specified frequency band, for each combination of channels, disregarding
% combinations containing noisy channels.
%
% Inputs:
% =======
% fnirs_data- a structure array of fNIRS data generated by the function
% 'readData2Struct', or the full path to a .mat file containing such an array
% couple_spec_file- full path to a file containing information regarding
% the pairings of participants, for which coherence coefficients are to be
% calculated. The information should be saved in tabular form in and
% MS-Excel or .csv file containing five columns, with labels in the first row, 
% in the following order- 'P1Group'- identifier of the group to which the
% first participant was assigned in the experiment; 'P1System'- serial number
% of the fNIRS system assigned to the first participant; 'P2Group'- identifier 
% of the group to which the second participant was assigned in the experiment; 
% 'P2System'- serial number of the fNIRS system assigned to the second
% participant; 'ExpGroup'- experimental group/condition to which this
% couple is assigned
% channel_def_file- full path to a .mat file containing a definition of the
% montage used during recording. This file should contain two vectors, 'tx'
% and 'rx', with corresponding elements referring to the source and receiver
% constituting a given channel, respectively
% min_period- minimal period, in seconds, for calculation of average
% coherence coefficients
% max_period- maximal period, in seconds, for calculation of average
% coherence coefficients
%
% Outputs:
% ========
% Cunweighted- an array of mean coherence values. Records/rows represent couples, 
% and columns contain mean coherence values for each trial in each 
% channel combination (i.e., combination 1 trial 1, combination 1 trial 2, ...
% combination n trial 1, combination n trial 2, ...). Mean values are
% calculated across valid coefficients in period within the specified
% range, and then the (unweighted) average is calculated across periods
% Cweighted- an array of mean coherence values. Records/rows represent couples, 
% and columns contain mean coherence values for each trial in each 
% channel combination (i.e., combination 1 trial 1, combination 1 trial 2, ...
% combination n trial 1, combination n trial 2, ...). Mean values are
% calculated across valid coefficients in period within the specified
% range, and then the (weighted) average is calculated across periods
% exp_groups- a vector of lables indicating which experimental group each
% couple has been assigned to
%
% Written by Michael Nevat, 2021

if ischar(fnirs_data)
    clc
    disp('Reading fNIRS Data from file...')
    m = matfile(fnirs_data);
    struct_name = who(m);
    load(fnirs_data)
    eval(['fnirs_data = ', char(struct_name)]);
    eval(['clear ', char(struct_name)]);
end

for p = 1 : length(fnirs_data)
    participants(p) = fnirs_data(p).Participant;
    groups(p) = fnirs_data(p).Group;
    systems(p) = fnirs_data(p).SystemID;
end
participants = participants';
groups = groups';
systems = systems';

[c, l, ~] = xlsread(couple_spec_file);
couples = table();
for v = 1 : length(l)
    couples.(l{v}) = c(:, v);
end
exp_groups = couples.ExpGroup;


load(channel_def_file)
Cunweighted = 9999 * ones(size(couples, 1), length(rx) ^ 2 * ...
    fnirs_data(1).Conditions * fnirs_data(1).TrialsPerCondition);
Cweighted = Cunweighted;

for c = 1 : size(couples, 1)
    disp_str = ['Group ', num2str(couples.P1Group(c)), ...
        ' System ', num2str(couples.P1System(c)) ...
        ' and ', 'Group ', num2str(couples.P2Group(c)), ...
        ' System ', num2str(couples.P2System(c))];
    p1 = find((groups == couples.P1Group(c)) & (systems == couples.P1System(c)));
    p2 = find((groups == couples.P2Group(c)) & (systems == couples.P2System(c)));
    if (length(fnirs_data(p1).Trials) == length(fnirs_data(p1).Trials))
        [Cunweighted(c, :), Cweighted(c, :)] = ...
            calculateMeanCoherencePerTrial(channel_def_file, ...
            fnirs_data(p1).O2Hb, fnirs_data(p2).O2Hb, ...
            fnirs_data(p1).Trials, fnirs_data(p2).Trials, ...
            [fnirs_data(p1).Channels; fnirs_data(p2).Channels], ...
            fnirs_data(p1).Samples, fnirs_data(p2).Samples, ...
            min_period, max_period, disp_str, ...
            fnirs_data(p1).fs, fnirs_data(p2).fs);
        disp('Saving coherence coefficients to temporary file...')
        try
            save('Coherence Coefficients.mat' , 'Cunweighted', 'Cweighted', 'exp_groups')
        catch
            disp('Unable to save data to temporary file')
        end
    else
        disp('Mismatch in number of trials. Skipping to next couple')
    end
end