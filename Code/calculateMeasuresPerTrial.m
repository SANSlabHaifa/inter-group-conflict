function calculateMeasuresPerTrial(base_path, n_sessions, n_conditions, trials_per_condition, old_ver)
% calculateMeasuresPerTrial(base_path, n_sessions, n_conditions, trials_per_condition[, old_ver])
% Calculates various measures on data obtained from the "Sync" task, and stores the calculated
% values in .csv files (a separate file for each measure).
% Arguments:
% base_path- path to a folder containing the data. This folder should contain a subfolder for
% for each group of participants, in which the files generated by the task
% are stored. The names of these subfolders should begin with the string
% "Group" or "group". The .csv files generated by this function will be
% stored in the folder specified in "base_path".
% n_sessions- number of sessions.
% n_conditions- number of conditions (typically 3).
% trials_per_condition- number of trials in each condition.
% old_ver (optional)- a flag indicating whether data were obtained from the
% previous version of the task, or from newer version (Nira's version). Set
% to 1 for the older version. Default: 0.
% ===============================
% Written by Michael Nevat, 2019.
% ===============================

if (nargin == 4), old_ver = 0;, end

folders = dir([base_path, '\*-*']);
if isempty(folders)
    clc
    disp('No data found. Aborting')
    return
end
for n = 1 : length(folders)
    groups{n} = folders(n).name;
end


for g = 1 : length(groups)
    
    total_trials = 0;
    
    for s = 1 : n_sessions
        
        if (n_sessions > 1)
            data_path = [base_path, '\', folders(g).name, '\Session', num2str(s)];
        else
            data_path = [base_path, '\', folders(g).name];
        end
        
        if ((s == 1) | (s == n_sessions))
            num_trials = n_conditions(1) * trials_per_condition(1);
        else
            num_trials = n_conditions(2) * trials_per_condition(2);
        end
        
        if old_ver
            l = dir ([data_path, '\*_p0.log']);
            for n = 1 : length(l)
                us = strfind(l(n).name, '_');
                cond_ids{n} = l(n).name(us(1) + 1 : us(2) - 1);
            end
        end
        
        for tr = 1 : num_trials
            
            if old_ver
                log_file_id = cond_ids{tr};
            else
                log_file_id = num2str(tr);
            end
            
            clc
            disp(['Calculating measures for group ', groups{g}, ', trial ', num2str(tr)])
            
			ds = initDataStruct(base_path, groups{g}, log_file_id, old_ver);
            if isempty(ds), continue, end
            
            zero_lag(g, total_trials + tr) = ds.wdcnew.meandc360{2, 1}(11);
            [max_corr(g, total_trials + tr), ~] = nanmax(ds.wdcnew.meandc360{2, 1}(:));
                        
            for p = 1 : ds.raw.numberofsubjects
                                					                
                if ~old_ver
                    tmp = strfind(ds.raw.log{1, 9 + p}, ': ');
                    ratings(ds.raw.numberofsubjects * (g - 1) + p, total_trials + tr) = ...
                        str2num(ds.raw.log{1, 9 + p}(tmp + 2 : end));
                end
                
            end
            
        end
        
        if (n_sessions > 1), total_trials = total_trials + num_trials;, end
        
        for p = 1 : ds.raw.numberofsubjects
            if old_ver
                participants(ds.raw.numberofsubjects * (g - 1) + p) = ...
                    str2num(ds.raw.log{1, 4 + 2 * p});
            else
                tmp = strfind(ds.raw.log{1, 9 + p}, ' S');
                participants(ds.raw.numberofsubjects * (g - 1) + p) = ...
                    str2num(ds.raw.log{1, 9 + p}(1 : tmp - 1));
                
            end
        end
        
    end
    
end

g = struct();
g.Group = groups';

p = struct();
p.ID = participants';


total_trials = 0;
for s = 1 : n_sessions
    if ((s == 1) | (s == n_sessions))
        num_trials = n_conditions(1) * trials_per_condition(1);
    else
        num_trials = n_conditions(2) * trials_per_condition(2);
    end
    for tr = 1 : num_trials
        g.(['Session' num2str(s) 'Trial' num2str(tr)]) = zero_lag(:, total_trials + tr);
    end
    total_trials = total_trials + num_trials;
end
T = struct2table(g);
writetable(T, [base_path, '\Zero Lag Correlations.csv'])

total_trials = 0;
for s = 1 : n_sessions
    if ((s == 1) | (s == n_sessions))
        num_trials = n_conditions(1) * trials_per_condition(1);
    else
        num_trials = n_conditions(2) * trials_per_condition(2);
    end
    for tr = 1 : num_trials
        g.(['Session' num2str(s) 'Trial' num2str(tr)]) = max_corr(:, total_trials + tr);
    end
    total_trials = total_trials + num_trials;
end
T = struct2table(g);
writetable(T, [base_path, '\Maximal Correlations.csv'])

if ~old_ver
    total_trials = 0;
    for s = 1 : n_sessions
        if ((s == 1) | (s == n_sessions))
            num_trials = n_conditions(1) * trials_per_condition(1);
        else
            num_trials = n_conditions(2) * trials_per_condition(2);
        end
        for tr = 1 : num_trials
            p.(['Session' num2str(s) 'Trial' num2str(tr)]) = ratings(:, total_trials + tr);
        end
        total_trials = total_trials + num_trials;
    end
    T = struct2table(p);
    writetable(T, [base_path, '\Ratings.csv'])
end